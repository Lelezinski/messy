#include "config.h"
#include <sys_functional_bus.h>

void functional_bus::processing_data(){
    int add_s;
    int data_s;
    int reg_s;
    bool flag_s;
    
    while (true){
        if (Ready_M.read() == true) {
            add_s = address_in_M.read();
            flag_s = flag_in_M.read();
            
            {% for sensor in data['sensors'] -%}
            if ({{sensor['name'].upper()}}_BASE_ADDRESS <= add_s && add_s <= ({{sensor['name'].upper()}}_BASE_ADDRESS + {{sensor['reg_name']}})) 
            {
                reg_s = add_s - {{sensor['name'].upper()}}_BASE_ADDRESS;
                data_s = data_in_M.read();
                //cout << data_s << endl;

                address_out_S[{{sensor['ID']}}].write(reg_s);
                data_out_S[{{sensor['ID']}}].write(data_s);
                flag_out_S[{{sensor['ID']}}].write(flag_s);
                selected_slave = {{sensor['ID']}};
                Set_Slave(selected_slave, true);
            }

            {% endfor -%}
        }
        wait();

        response();

        while (Go_S[selected_slave].read() != false && Ready_M.read() != false) {
            wait();
        }
        
        Set_Go(false);
 
    }
}    

void functional_bus::response(){
    if (Go_S[selected_slave].read() == true) {
        data_out_M.write(data_in_S[selected_slave].read());
        Set_Go(true);
        Set_Slave(selected_slave, false);
    }
}

void functional_bus::Set_Go(bool flag){
    Go_M.write(flag);
}

void functional_bus::Set_Slave(int address, bool flag){
    Ready_S[address].write(flag);
}